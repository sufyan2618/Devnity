// app/api/correct-code/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
    try {
        const { code, error, language } = await request.json();

        if (!process.env.GOOGLE_API_KEY) {
            console.error('Google API key not configured');
            return NextResponse.json(
                { error: 'Google API key not configured' },
                { status: 500 }
            );
        }

        // Try with a different model, e.g., gemini-1.5-flash-latest
        const modelName = "gemini-1.5-flash-latest"; // Or "gemini-1.0-pro"
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${process.env.GOOGLE_API_KEY}`;

        console.log(`Fetching from Gemini API: ${apiUrl}`); // Log the URL to verify

        const response = await fetch(
            apiUrl,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: `Fix this ${language} code error:\n\nError: ${error}\n\nCode:\n${code}\n\nProvide only the corrected code without any explanations or markdown formatting:`
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.1,
                        maxOutputTokens: 1000,
                    }
                }),
            }
        );

        if (!response.ok) {
            const errorBody = await response.text(); // Get more details from the API error
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorBody}`);
        }

        const data = await response.json();

        const correctedCode = data.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!correctedCode) {
            console.warn('No corrected code generated by Gemini:', data);
            return NextResponse.json(
                { error: 'No correction generated' },
                { status: 500 }
            );
        }

        // Clean up the response (remove markdown code blocks if present)
        const cleanedCode = correctedCode
            .replace(/^```/i, '')
            .replace(/\n?```$/i, '')
            .trim();

        return NextResponse.json({
            correctedCode: cleanedCode,
            originalError: error
        });

    } catch (error) { // Catch any error and log it
        const err = error as Error;
        return NextResponse.json(
            { error: 'Failed to correct code', details: err.message || 'Unknown error' },
            { status: 500 }
        );
    }
}
